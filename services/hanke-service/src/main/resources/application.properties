# To be removed once everything tested to run smooth without these. (Note, these were used
# in DbConfigProperties.kt)
#app.datasource.url=jdbc:postgresql://${HAITATON_HOST:localhost}:${HAITATON_PORT:5432}/${HAITATON_DATABASE:haitaton}
#app.datasource.username=${HAITATON_USER:haitaton_user}
#app.datasource.password=${HAITATON_PASSWORD:haitaton}
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

spring.datasource.url=jdbc:postgresql://${HAITATON_HOST:localhost}:${HAITATON_PORT:5432}/${HAITATON_DATABASE:haitaton}
spring.datasource.username=${HAITATON_USER:haitaton_user}
spring.datasource.password=${HAITATON_PASSWORD:haitaton}

# JPA
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL94Dialect
# This makes the database field names to match the entity member names
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Spring Boot Actuator Management for Kubernetes (see https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/html/production-ready-features.html#production-ready-kubernetes-probes)
# Use separate HTTP port for probes
management.server.port=8081
management.endpoint.health.probes.enabled=liveness,readiness
# Spring Boot Actuator Info properties
info.java-version = ${java.specification.version}
info.java-vendor = ${java.specification.vendor}
server.forward-headers-strategy=FRAMEWORK

# LIQUIBASE
# For Liquibase, until we can finalize the DataSource setup. Once that is done, Liquibase should
# be able to use the (primary) data source of Spring Boot directly.
# TODO: If testing will at some point need database "haitaton_test", that will need to handled
# with e.g. Spring profiles
spring.liquibase.url=jdbc:postgresql://${HAITATON_HOST:localhost}:${HAITATON_PORT:5432}/${HAITATON_DATABASE:haitaton}
spring.liquibase.user=${HAITATON_USER:haitaton_user}
spring.liquibase.password=${HAITATON_PASSWORD:haitaton}
logging.level.liquibase = INFO
