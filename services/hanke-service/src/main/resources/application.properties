haitaton.cors.allowedOrigins=${HAITATON_CORS_ALLOWED_ORIGINS:http://localhost:3001}

haitaton.allu.baseUrl=${ALLU_BASEURL:/}
haitaton.allu.username=${ALLU_USERNAME:fake_user}
haitaton.allu.password=${ALLU_PASSWORD:fake_password}
haitaton.allu.insecure=${ALLU_INSECURE:false}
haitaton.allu.updateIntervalMilliSeconds=${ALLU_UPDATE_INTERVAL:60000}
haitaton.allu.updateInitialDelayMilliSeconds=${ALLU_UPDATE_INITIAL_DELAY:60000}

haitaton.clamav.baseUrl=${CLAMAV_BASE_URL:http://localhost:3030}

# GDPR API is disabled by default for tests and local running.
# Spring Security will otherwise try to call the issuer's openid-configuration URL,
# which will fail, unless the developer has also started profile-gdpr-api-tester.
haitaton.gdpr.disabled=${HAITATON_GDPR_DISABLED:true}
haitaton.gdpr.issuer=${HAITATON_GDPR_ISSUER:http://gdpr-api-tester:8888/}
haitaton.gdpr.audience=${HAITATON_GDPR_AUDIENCE:http://localhost:8080/haitaton}
haitaton.gdpr.authorization-field=${HAITATON_GDPR_AUTHORIZATION_FIELD:http://localhost:8080}
haitaton.gdpr.query-scope=${HAITATON_GDPR_QUERY_SCOPE:haitaton.gdprquery}
haitaton.gdpr.delete-scope=${HAITATON_GDPR_DELETE_SCOPE:haitaton.gdprdelete}
#logging.level.org.springframework.security=DEBUG

# Disable endpoints that are e.g. in development and should not be in production.
haitaton.feature.hanke-editing=${HAITATON_FEATURE_HANKE_EDITING:true}

spring.datasource.url=jdbc:postgresql://${HAITATON_HOST:localhost}:${HAITATON_PORT:5432}/${HAITATON_DATABASE:haitaton}
spring.datasource.username=${HAITATON_USER:haitaton_user}
spring.datasource.password=${HAITATON_PASSWORD:haitaton}

# JPA
spring.jpa.open-in-view=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL94Dialect
# This makes the database field names to match the entity member names
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# Don't log SQL queries. This is the default, but left here to make it easy to enable while developing.
spring.jpa.show-sql=false

spring.servlet.multipart.max-file-size=101MB
spring.servlet.multipart.max-request-size=101MB

# Spring Boot Actuator Management for Kubernetes (see https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/html/production-ready-features.html#production-ready-kubernetes-probes)
# Use separate HTTP port for probes
management.server.port=8081
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
# Spring Boot Actuator Info properties
info.java-version = ${java.specification.version}
info.java-vendor = ${java.specification.vendor}
server.forward-headers-strategy=FRAMEWORK

#For REST API request parameter parsing to work for date values
spring.mvc.format.date=yyyy-MM-dd

# LIQUIBASE
# For Liquibase, until we can finalize the DataSource setup. Once that is done, Liquibase should
# be able to use the (primary) data source of Spring Boot directly.
# TODO: If testing will at some point need database "haitaton_test", that will need to handled
# with e.g. Spring profiles
spring.liquibase.url=jdbc:postgresql://${HAITATON_HOST:localhost}:${HAITATON_PORT:5432}/${HAITATON_DATABASE:haitaton}
spring.liquibase.user=${HAITATON_USER:haitaton_user}
spring.liquibase.password=${HAITATON_PASSWORD:haitaton}
logging.level.liquibase = INFO

# SECURITY - provide fallback values for integration tests to avoid application context from failing to start
security.oauth2.client.client-id=${HAITATON_OAUTH2_CLIENT_ID:iTestMock}
security.oauth2.resource.prefer-token-info=false
security.oauth2.resource.user-info-uri=${HAITATON_OAUTH2_USER_INFO_URI:iTestMock}

# SENTRY
# DSN is a public detail and there is no need to hide behind an environment variable (in UI it would also be quite difficult to do that)
sentry.dsn=https://a4148023aaeb4e88a37cb41e938dc076@o394401.ingest.sentry.io/5617535
sentry.environment=${HAITATON_SENTRY_ENVIRONMENT:dev}
# Make sure only exceptions that have not been handled by exception resolvers with higher order are sent to Sentry
sentry.exception-resolver-order=2147483647
# minimum event level is "error" as default
sentry.logging.minimum-event-level=error
# minimum breadcrumb level is "info" as default
sentry.logging.minimum-breadcrumb-level=info
# as default Sentry logging is disabled
sentry.logging.enabled=${HAITATON_SENTRY_LOGGING_ENABLED:false}

# Configuration for Swagger UI & OpenAPI documentation.
# Default is access from behind reverse proxy.
springdoc.swagger-ui.url=${HAITATON_SWAGGER_PATH_PREFIX:/api/v3}/api-docs
springdoc.swagger-ui.config-url=${HAITATON_SWAGGER_PATH_PREFIX:/api/v3}/api-docs/swagger-config

spring.mail.host=${MAIL_SENDER_HOST:localhost}
spring.mail.port=${MAIL_SENDER_PORT:2525}
spring.mail.properties.mail.transport.protocol=${MAIL_SENDER_PROTOCOL:smtp}
# Set to true to get detailed debug info from SMTP client
spring.mail.properties.mail.debug=${MAIL_SENDER_DEBUG:false}
spring.mail.properties.mail.smtp.auth=${MAIL_SENDER_AUTH:false}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SENDER_STARTTLS_ENABLE:true}

# For non-prod envs, send filter should be used to send only in allowed addresses.
haitaton.email.filter.use=${HAITATON_EMAIL_FILTER_USE:true}
# List of allowed addresses, separated by ;
haitaton.email.filter.allow-list=${HAITATON_EMAIL_FILTER_ALLOW_LIST:haitaton@test.com}
haitaton.email.from=${HAITATON_EMAIL_FROM:haitaton@test.example}
haitaton.email.baseUrl=${HAITATON_EMAIL_BASEURL:http://localhost:3001}
