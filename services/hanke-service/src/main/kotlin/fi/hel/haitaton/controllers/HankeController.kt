package fi.hel.haitaton.controllers

import fi.hel.haitaton.data.Hanke
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import java.time.ZonedDateTime

@RestController
@RequestMapping("/hankkeet")
open class HankeController {

    //TODO: get service for saving new Hanke

    /**
     * Get one hanke with hankeId.
     *  TODO: token and user from front?
     *  TODO: logging
     *  TODO: validation for input
     *  TODO: ask hankeId to be generated by an service before calling saving...or where?
     *
     */
    @GetMapping
    fun getHankeById(@RequestParam(name = "hankeId") hankeId: String): ResponseEntity<Any> {
        if (hankeId == null)
            return ResponseEntity.badRequest().body("id puuttuu") //TODO, error handling
        else
            return ResponseEntity.ok(getHanke())
    }

    /**
     * Add one hanke.
     *  TODO: token and user from front?
     *  TODO: logging
     *  TODO: validation for input
     *  TODO: ask hankeId to be generated by an service before calling saving...or where?
     *
     */
    @PostMapping()
    fun AddHanke(@RequestBody hanke: Hanke): ResponseEntity<Any> {
        hanke.hankeId = getHankeId()

        //call service to save
        if (hanke == null)  //TODO: can this happen?
            return ResponseEntity.badRequest().body("hanke puuttuu") //TODO, error handling
        else
            return ResponseEntity.ok(hanke)
    }


    //temporary object creator for getting started TODO: Real implementation for returning hanke from backend
    fun getHanke(): Hanke {
        return Hanke("AAA123", "Mannerheimintien remontti remonttinen", ZonedDateTime.now(), ZonedDateTime.now(), "Risto", 1)
    }

    //to get new id for hankeId, TODO: this needs real implementation
    fun getHankeId(): String {
        return "CREATED123"
    }
}