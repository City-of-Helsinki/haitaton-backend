package fi.hel.haitaton.hanke

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import java.time.ZonedDateTime

@RestController
@RequestMapping("/hankkeet")
open class HankeController() {

    //TODO: get service for saving new Hanke
    //@Autowired
    var hankeService: HankeService = HankeServiceImpl()

    /**
     * Get one hanke with hankeId.
     *  TODO: token and user from front?
     *  TODO: logging
     *  TODO: validation for input
     *  TODO: ask hankeId to be generated by an service before calling saving...or where?
     *
     */
    @GetMapping
    fun getHankeById(@RequestParam(name = "hankeId") hankeId: String?): ResponseEntity<Any> {
        if (hankeId == null) {
            return ResponseEntity.badRequest().build() //TODO, error handling
        } else {
            val hanke = hankeService.loadHanke(hankeId)
            if (hanke == null) {
                return ResponseEntity.notFound().build()//TODO, error handling
            } else {
                return ResponseEntity.ok(hanke)
            }
        }
    }

    /**
     * Add one hanke.
     *  TODO: user from front?
     *  TODO: logging
     *  TODO: validation for input
     *
     */
    @PostMapping()
    fun createHanke(@RequestBody hanke: Hanke?): ResponseEntity<String> {

        return if (hanke == null) {
            ResponseEntity.badRequest().body("hanke puuttuu") //TODO, error handling

        } else {

            var createdHanke = hankeService.save(hanke)
            var id = createdHanke?.hankeId

            if (createdHanke == null || id == null) {
                //ResponseEntity.status(500) //TODO: Error handling for saving failed
                ResponseEntity.unprocessableEntity().body("saving failed")  //just returning something
            } else {
                ResponseEntity.ok(createdHanke.hankeId as String)

            }
        }
    }

    @PutMapping("/{hankeId}")
    fun createPartialHanke(@RequestBody hanke: Hanke?, @PathVariable hankeId: String?): ResponseEntity<Any> {
        return if (hanke == null || hankeId == null) { //TODO: hankeId is empty?
            ResponseEntity.badRequest().body("hanke puuttuu") //TODO, error handling
        } else {
            // TODO call service to save
            //TODO: validation for data
            ResponseEntity.ok(hanke)
        }
    }

    //temporary object creator for getting started TODO: Real implementation for returning hanke from backend
    private fun loadHanke(hankeId: String): Hanke? {
        return Hanke(hankeId, true, "Mannerheimintien remontti remonttinen", ZonedDateTime.now(), ZonedDateTime.now(), "Risto", 1)
    }
}